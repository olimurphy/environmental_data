#vec_1
vec_1
#loop
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n
)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(10, n, replace = TRUE))
#vec_1
vec_1
#loop
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n
)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(min:max, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
?sample
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(min:max, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(min:max, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(10, min = 100, max = 2000)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(min:max, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(10, min = 100, max = 2000)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(min:max, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(10)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(min:max, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(10)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
?function
?function
?function
f
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(min:max, 1)
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n,)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n,)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n,)
create_and_print_vec = function(n, min = 100, max = 2000)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n,)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec(n)
n = 12345
vec_1 = sample(12, n, replace = TRUE)
head(vec_1)
vec_2 = c(vec_1 == 3)
vec_1[vec_2]
knitr::opts_chunk$set(include = FALSE)
n = 12345
vec_1 = sample(12, n, replace = TRUE)
vec_2 = c(vec_1 == 3)
for (i in 1:10)
{
print(paste0("This is loop iteration: ", i))
vec_2
for (i in 1:10)
{
print(paste0("This is loop iteration: ", i))
}
for (i in 1:10)
{
print(paste0("This is loop iteration: ", i))
}
for (i in 1:10)
{
print(paste0("This is loop iteration: ", i))
}
for (i in 1:10)
{
print(i)
}
for (i in 1:10)
{
print(i)
}
n = 12345
vec_1 = sample(12, n, replace = TRUE)
vec_2 = c(vec_1 == 3)
n = 12345
vec_1 = sample(12, n, replace = TRUE)
vec_2 = c(vec_1 == 3)
n = 12345
vec_1 = sample(12, n, replace = TRUE)
head(vec_1)
length(vec_1)
sum(vec_1 == 3)
n = 10
vec_1 = sample(12, n, replace = TRUE)
paste0("Sum of elements with value 3: ", sum(vec_1 == 3))
n = 10
vec_1 = sample(12, n, replace = TRUE)
paste0("Sum of elements with value 3: ", sum(vec_1 == 3))
n = 10
vec_1 = sample(12, n, replace = TRUE)
paste0("Sum of elements with value 3: ", sum(vec_1 == 3))
n = 10
vec_1 = sample(12, n, replace = TRUE)
paste0("Sum of elements with value 3: ", sum(vec_1 == 3))
for (i in 1:10)
{
print(paste0("This is loop iteration: ", i))
}
for (i in 1:10)
{
print(paste0("This is loop iteration: ", i))
}
for (i in 1:10)
{
print(paste0("This is loop iteration: ", i))
}
n = sample(100, 1)
for (i in 1:n)
{
print(i)
}
n = sample(100, 1)
for (i in 1:n)
{
print(i)
}
{
print(i)
}
n = sample(100, 1)
for (i in 1:n)
{
print(i)
}
n = 17
vec_1 = c(sample(10, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec(n)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec(n)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec(n)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec(n)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(10, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec(n)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(min:max, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
create_and_print_vec(n, min = 100, max = 2000)
create_and_print_vec(n)
create_and_print_vec = function(n, min = 1, max = 10)
{n = sample(min:max, 1)
vec_1 = c(sample(min:max, n, replace = TRUE))
for (i in 1:n)
{
print(
paste('The element of vec_1 at index', i, 'is', vec_1[i]))
}}
install.packages("here")
require(here)
here()
read.csv(here("dat_catrate", "catrate.csv"))
dat_catrate = read.csv(here("data", "catrate.csv"))
head(dat_catrate)
dat_rope = read.csv(here("data", "rope.csv"))
dat_delomys = read.csv(here("data", "delomys.csv"))
head(dat_delomys)
head(dat_rope)
plot(body_mass$dat_delomys, body_length$dat_delomys)
hist(penguins$body_mass_g)
class(penguins)
penguins = data.frame(penguins)
mean(penguins$body_mass_g)
mean(penguins$body_mass_g, na.rm = TRUE)
summary(penguins)
pairs(penguins)
plot(penguins$bill_length_mm, penguins$bill_depth_mm)
hist(penguins$body_mass_g)
boxplot()
install.package(penguins)
require(penguins)
class(penguins)
install.package(palmerpenguins)
require(palmerpenguins)
penguins = data.frame(palmerpenguins)
penguins = data.frame(palmerpenguins)
install.package(palmerpenguins)
#Prepare Dataset
install.packages(palmerpenguins)
#Prepare Dataset
install.packages("palmerpenguins")
require("palmerpenguins")
penguins = data.frame("palmerpenguins")
mean(penguins$body_mass_g)
head(penguins)
#Prepare Dataset
install.packages("palmerpenguins")
install.packages("palmerpenguins")
require("palmerpenguins")
penguins = data.frame("palmerpenguins")
install.packages(here)
install.packages("here")
install.packages("palmerpenguins")
install.packages("here")
require("palmerpenguins")
require("here")
penguins = data.frame("palmerpenguins")
View(penguins)
class(penguins)
head(penguins)
penguins = data.frame(penguins)
#data exploration--numerical exploration
mean(penguins$body_mass_g)
#NA returned... head shows missing data.
mean(penguins$body_mass_g, na.rm = TRUE)
#na.rm tells R whether or not to remove null data rows
summary(penguins)
#graphical exploration: plots
plot(penguins$bill_length_mm, penguins$bill_depth_mm)
plot(penguins)
#boxplot
boxplot(penguins$bill_depth_mm)
boxplot(bill_depth_mm ~ sex, data = penguins)
par(mfrow = c(1, 2))
boxplot(penguins$bill_depth_mm)
boxplot(bill_depth_mm ~ sex, data = penguins)
?par()
#coplots
coplot(body_mass_g ~ bill_depth_mm | sex, data = penguins)
coplot(body_mass_g ~ bill_depth_mm | species, data = penguins)
coplot(body_mass_g ~ bill_depth_mm | flipper_length_mm, data = penguins)
require(here)
png(filename = here("assignments", "In_Class_Assignment", basic_histogram.png"), width = 800, height = 600)
hist(penguins$body_mass_g)
dev.off()
require(here)
png(filename = here("basic_histogram.png"), width = 800, height = 600)
hist(penguins$body_mass_g)
dev.off()
png(filename = here("basic_histogram.png"), width = 800, height = 600)
hist(penguins$body_mass_g)
dev.off()
png(filename = here("basic_histogram_titled.png"), width = 800, height = 600)
hist(penguins$body_mass_g, main = "Penguin Body Mass")
dev.off()
